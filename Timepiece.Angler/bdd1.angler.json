{
  "Assertions": {},
  "Consts": {
    "101": {
      "$type": "MatchSet",
      "deny": {
        "$type": "Or",
        "disjuncts": []
      },
      "permit": {
        "$type": "Or",
        "disjuncts": [
          {
            "$type": "PrefixMatches",
            "ip_wildcard": "1.0.1.0/24",
            "prefix_length_range": "24-24"
          },
          {
            "$type": "And",
            "conjuncts": [
              {
                "$type": "Not",
                "expr": {
                  "$type": "PrefixMatches",
                  "ip_wildcard": "1.0.1.0/24",
                  "prefix_length_range": "24-24"
                }
              },
              {
                "$type": "PrefixMatches",
                "ip_wildcard": "1.0.2.0/24",
                "prefix_length_range": "24-24"
              }
            ]
          }
        ]
      }
    },
    "102": {
      "$type": "MatchSet",
      "deny": {
        "$type": "Or",
        "disjuncts": []
      },
      "permit": {
        "$type": "Or",
        "disjuncts": [
          {
            "$type": "PrefixMatches",
            "ip_wildcard": "1.0.2.0/24",
            "prefix_length_range": "24-24"
          },
          {
            "$type": "And",
            "conjuncts": [
              {
                "$type": "Not",
                "expr": {
                  "$type": "PrefixMatches",
                  "ip_wildcard": "1.0.2.0/24",
                  "prefix_length_range": "24-24"
                }
              },
              {
                "$type": "PrefixMatches",
                "ip_wildcard": "1.0.1.0/24",
                "prefix_length_range": "24-24"
              }
            ]
          }
        ]
      }
    },
    "FOO": {
      "$type": "MatchSet",
      "deny": {
        "$type": "Or",
        "disjuncts": [
          {
            "$type": "PrefixMatches",
            "ip_wildcard": "20.20.20.0/24",
            "prefix_length_range": "24-26"
          }
        ]
      },
      "permit": {
        "$type": "Or",
        "disjuncts": [
          {
            "$type": "And",
            "conjuncts": [
              {
                "$type": "Not",
                "expr": {
                  "$type": "PrefixMatches",
                  "ip_wildcard": "20.20.20.0/24",
                  "prefix_length_range": "24-26"
                }
              },
              {
                "$type": "PrefixMatches",
                "ip_wildcard": "0.0.0.0/0",
                "prefix_length_range": "0-32"
              }
            ]
          }
        ]
      }
    },
    "FOO2": {
      "$type": "MatchSet",
      "deny": {
        "$type": "Or",
        "disjuncts": [
          {
            "$type": "PrefixMatches",
            "ip_wildcard": "20.20.20.0/24",
            "prefix_length_range": "25-26"
          }
        ]
      },
      "permit": {
        "$type": "Or",
        "disjuncts": [
          {
            "$type": "And",
            "conjuncts": [
              {
                "$type": "Not",
                "expr": {
                  "$type": "PrefixMatches",
                  "ip_wildcard": "20.20.20.0/24",
                  "prefix_length_range": "25-26"
                }
              },
              {
                "$type": "PrefixMatches",
                "ip_wildcard": "0.0.0.0/0",
                "prefix_length_range": "0-32"
              }
            ]
          }
        ]
      }
    },
    "list1": {
      "$type": "String",
      "value": "1:2"
    },
    "list2": {
      "$type": "String",
      "value": "1:3"
    },
    "list3": {
      "$type": "String",
      "value": "1:4"
    }
  },
  "Declarations": {
    "TEST_ADD1": {
      "arg": "pair",
      "body": {
        "$type": "If(TPair)",
        "comment": "bind",
        "falseStatements": {
          "$type": "Return(TPair)",
          "return_value": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "guard": {
          "$type": "First(TBool;TRoute)",
          "pair": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "trueStatements": {
          "$type": "Seq(TPair)",
          "first": {
            "$type": "Assign(TRoute)",
            "lhs": {
              "$type": "Var(TRoute)",
              "name": "route"
            },
            "rhs": {
              "$type": "Second(TBool;TRoute)",
              "pair": {
                "$type": "Var(TPair)",
                "name": "pair"
              }
            }
          },
          "second": {
            "$type": "Seq(_)",
            "first": {
              "$type": "Skip"
            },
            "second": {
              "$type": "Return(TPair)",
              "return_value": {
                "$type": "Pair(TBool;TRoute)",
                "first": {
                  "$type": "True"
                },
                "second": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            }
          }
        }
      }
    },
    "TEST_ADD2": {
      "arg": "pair",
      "body": {
        "$type": "If(TPair)",
        "comment": "bind",
        "falseStatements": {
          "$type": "Return(TPair)",
          "return_value": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "guard": {
          "$type": "First(TBool;TRoute)",
          "pair": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "trueStatements": {
          "$type": "Seq(TPair)",
          "first": {
            "$type": "Assign(TRoute)",
            "lhs": {
              "$type": "Var(TRoute)",
              "name": "route"
            },
            "rhs": {
              "$type": "Second(TBool;TRoute)",
              "pair": {
                "$type": "Var(TPair)",
                "name": "pair"
              }
            }
          },
          "second": {
            "$type": "Seq(_)",
            "first": {
              "$type": "Skip"
            },
            "second": {
              "$type": "Return(TPair)",
              "return_value": {
                "$type": "Pair(TBool;TRoute)",
                "first": {
                  "$type": "True"
                },
                "second": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            }
          }
        }
      }
    },
    "TEST_ADD3": {
      "arg": "pair",
      "body": {
        "$type": "If(TPair)",
        "comment": "bind",
        "falseStatements": {
          "$type": "Return(TPair)",
          "return_value": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "guard": {
          "$type": "First(TBool;TRoute)",
          "pair": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "trueStatements": {
          "$type": "Seq(TPair)",
          "first": {
            "$type": "Assign(TRoute)",
            "lhs": {
              "$type": "Var(TRoute)",
              "name": "route"
            },
            "rhs": {
              "$type": "Second(TBool;TRoute)",
              "pair": {
                "$type": "Var(TPair)",
                "name": "pair"
              }
            }
          },
          "second": {
            "$type": "Seq(_)",
            "first": {
              "$type": "Skip"
            },
            "second": {
              "$type": "Return(TPair)",
              "return_value": {
                "$type": "Pair(TBool;TRoute)",
                "first": {
                  "$type": "True"
                },
                "second": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            }
          }
        }
      }
    },
    "TEST_ADD_REMOVE1": {
      "arg": "pair",
      "body": {
        "$type": "If(TPair)",
        "comment": "bind",
        "falseStatements": {
          "$type": "Return(TPair)",
          "return_value": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "guard": {
          "$type": "First(TBool;TRoute)",
          "pair": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "trueStatements": {
          "$type": "Seq(TPair)",
          "first": {
            "$type": "Assign(TRoute)",
            "lhs": {
              "$type": "Var(TRoute)",
              "name": "route"
            },
            "rhs": {
              "$type": "Second(TBool;TRoute)",
              "pair": {
                "$type": "Var(TPair)",
                "name": "pair"
              }
            }
          },
          "second": {
            "$type": "Seq(_)",
            "first": {
              "$type": "Seq(_)",
              "first": {
                "$type": "Assign(TRoute)",
                "lhs": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                },
                "rhs": {
                  "$type": "WithField(TRoute;TInt32)",
                  "fieldName": "metric",
                  "fieldVal": {
                    "$type": "Int32",
                    "value": 50
                  },
                  "record": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                }
              },
              "second": {
                "$type": "Assign(TRoute)",
                "lhs": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                },
                "rhs": {
                  "$type": "WithField(TRoute;TSet)",
                  "fieldName": "communities",
                  "fieldVal": {
                    "$type": "SetRemove",
                    "expr": {
                      "$type": "Var(_)",
                      "name": "list1"
                    },
                    "set": {
                      "$type": "GetField(TRoute;TSet)",
                      "fieldName": "communities",
                      "record": {
                        "$type": "Var(TRoute)",
                        "name": "route"
                      }
                    }
                  },
                  "record": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                }
              }
            },
            "second": {
              "$type": "Return(TPair)",
              "return_value": {
                "$type": "Pair(TBool;TRoute)",
                "first": {
                  "$type": "True"
                },
                "second": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            }
          }
        }
      }
    },
    "TEST_ADD_REMOVE2": {
      "arg": "pair",
      "body": {
        "$type": "If(TPair)",
        "comment": "bind",
        "falseStatements": {
          "$type": "Return(TPair)",
          "return_value": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "guard": {
          "$type": "First(TBool;TRoute)",
          "pair": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "trueStatements": {
          "$type": "Seq(TPair)",
          "first": {
            "$type": "Assign(TRoute)",
            "lhs": {
              "$type": "Var(TRoute)",
              "name": "route"
            },
            "rhs": {
              "$type": "Second(TBool;TRoute)",
              "pair": {
                "$type": "Var(TPair)",
                "name": "pair"
              }
            }
          },
          "second": {
            "$type": "Seq(_)",
            "first": {
              "$type": "Seq(_)",
              "first": {
                "$type": "Seq(_)",
                "first": {
                  "$type": "Assign(TRoute)",
                  "lhs": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  },
                  "rhs": {
                    "$type": "WithField(TRoute;TSet)",
                    "fieldName": "communities",
                    "fieldVal": {
                      "$type": "SetUnion",
                      "sets": [
                        {
                          "$type": "GetField(TRoute;TSet)",
                          "fieldName": "communities",
                          "record": {
                            "$type": "Var(TRoute)",
                            "name": "route"
                          }
                        },
                        {
                          "$type": "SetAdd",
                          "expr": {
                            "$type": "String",
                            "value": "1:2"
                          },
                          "set": {
                            "$type": "Set"
                          }
                        }
                      ]
                    },
                    "record": {
                      "$type": "Var(TRoute)",
                      "name": "route"
                    }
                  }
                },
                "second": {
                  "$type": "Assign(TRoute)",
                  "lhs": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  },
                  "rhs": {
                    "$type": "WithField(TRoute;TSet)",
                    "fieldName": "communities",
                    "fieldVal": {
                      "$type": "SetRemove",
                      "expr": {
                        "$type": "Var(_)",
                        "name": "list1"
                      },
                      "set": {
                        "$type": "GetField(TRoute;TSet)",
                        "fieldName": "communities",
                        "record": {
                          "$type": "Var(TRoute)",
                          "name": "route"
                        }
                      }
                    },
                    "record": {
                      "$type": "Var(TRoute)",
                      "name": "route"
                    }
                  }
                }
              },
              "second": {
                "$type": "Assign(TRoute)",
                "lhs": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                },
                "rhs": {
                  "$type": "WithField(TRoute;TInt32)",
                  "fieldName": "metric",
                  "fieldVal": {
                    "$type": "Int32",
                    "value": 50
                  },
                  "record": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                }
              }
            },
            "second": {
              "$type": "Return(TPair)",
              "return_value": {
                "$type": "Pair(TBool;TRoute)",
                "first": {
                  "$type": "True"
                },
                "second": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            }
          }
        }
      }
    },
    "TEST_COMMUTATIVE1": {
      "arg": "pair",
      "body": {
        "$type": "If(TPair)",
        "comment": "bind",
        "falseStatements": {
          "$type": "Return(TPair)",
          "return_value": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "guard": {
          "$type": "First(TBool;TRoute)",
          "pair": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "trueStatements": {
          "$type": "Seq(TPair)",
          "first": {
            "$type": "Assign(TRoute)",
            "lhs": {
              "$type": "Var(TRoute)",
              "name": "route"
            },
            "rhs": {
              "$type": "Second(TBool;TRoute)",
              "pair": {
                "$type": "Var(TPair)",
                "name": "pair"
              }
            }
          },
          "second": {
            "$type": "Seq(_)",
            "first": {
              "$type": "Seq(_)",
              "first": {
                "$type": "Assign(TRoute)",
                "lhs": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                },
                "rhs": {
                  "$type": "WithField(TRoute;TInt32)",
                  "fieldName": "metric",
                  "fieldVal": {
                    "$type": "Int32",
                    "value": 50
                  },
                  "record": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                }
              },
              "second": {
                "$type": "Assign(TRoute)",
                "lhs": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                },
                "rhs": {
                  "$type": "WithField(TRoute;TSet)",
                  "fieldName": "communities",
                  "fieldVal": {
                    "$type": "SetUnion",
                    "sets": [
                      {
                        "$type": "GetField(TRoute;TSet)",
                        "fieldName": "communities",
                        "record": {
                          "$type": "Var(TRoute)",
                          "name": "route"
                        }
                      },
                      {
                        "$type": "SetAdd",
                        "expr": {
                          "$type": "String",
                          "value": "1:2"
                        },
                        "set": {
                          "$type": "Set"
                        }
                      }
                    ]
                  },
                  "record": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                }
              }
            },
            "second": {
              "$type": "Return(TPair)",
              "return_value": {
                "$type": "Pair(TBool;TRoute)",
                "first": {
                  "$type": "True"
                },
                "second": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            }
          }
        }
      }
    },
    "TEST_COMMUTATIVE2": {
      "arg": "pair",
      "body": {
        "$type": "If(TPair)",
        "comment": "bind",
        "falseStatements": {
          "$type": "Return(TPair)",
          "return_value": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "guard": {
          "$type": "First(TBool;TRoute)",
          "pair": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "trueStatements": {
          "$type": "Seq(TPair)",
          "first": {
            "$type": "Assign(TRoute)",
            "lhs": {
              "$type": "Var(TRoute)",
              "name": "route"
            },
            "rhs": {
              "$type": "Second(TBool;TRoute)",
              "pair": {
                "$type": "Var(TPair)",
                "name": "pair"
              }
            }
          },
          "second": {
            "$type": "Seq(_)",
            "first": {
              "$type": "Seq(_)",
              "first": {
                "$type": "Assign(TRoute)",
                "lhs": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                },
                "rhs": {
                  "$type": "WithField(TRoute;TSet)",
                  "fieldName": "communities",
                  "fieldVal": {
                    "$type": "SetUnion",
                    "sets": [
                      {
                        "$type": "GetField(TRoute;TSet)",
                        "fieldName": "communities",
                        "record": {
                          "$type": "Var(TRoute)",
                          "name": "route"
                        }
                      },
                      {
                        "$type": "SetAdd",
                        "expr": {
                          "$type": "String",
                          "value": "1:2"
                        },
                        "set": {
                          "$type": "Set"
                        }
                      }
                    ]
                  },
                  "record": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                }
              },
              "second": {
                "$type": "Assign(TRoute)",
                "lhs": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                },
                "rhs": {
                  "$type": "WithField(TRoute;TInt32)",
                  "fieldName": "metric",
                  "fieldVal": {
                    "$type": "Int32",
                    "value": 50
                  },
                  "record": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                }
              }
            },
            "second": {
              "$type": "Return(TPair)",
              "return_value": {
                "$type": "Pair(TBool;TRoute)",
                "first": {
                  "$type": "True"
                },
                "second": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            }
          }
        }
      }
    },
    "TEST_MATCH_COMM1": {
      "arg": "pair",
      "body": {
        "$type": "If(TPair)",
        "comment": "bind",
        "falseStatements": {
          "$type": "Return(TPair)",
          "return_value": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "guard": {
          "$type": "First(TBool;TRoute)",
          "pair": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "trueStatements": {
          "$type": "Seq(TPair)",
          "first": {
            "$type": "Assign(TRoute)",
            "lhs": {
              "$type": "Var(TRoute)",
              "name": "route"
            },
            "rhs": {
              "$type": "Second(TBool;TRoute)",
              "pair": {
                "$type": "Var(TPair)",
                "name": "pair"
              }
            }
          },
          "second": {
            "$type": "If(TUnit)",
            "comment": "~RMCLAUSE~TEST_MATCH_COMM1~10~",
            "falseStatements": {
              "$type": "If(TUnit)",
              "comment": "~RMCLAUSE~TEST_MATCH_COMM1~20~",
              "falseStatements": {
                "$type": "Return(TPair)",
                "return_value": {
                  "$type": "Pair(TBool;TRoute)",
                  "first": {
                    "$type": "GetField(TRoute;TBool)",
                    "fieldName": "LocalDefaultAction",
                    "record": {
                      "$type": "Var(TRoute)",
                      "name": "route"
                    }
                  },
                  "second": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                }
              },
              "guard": {
                "$type": "SetContains",
                "search": {
                  "$type": "Var(TString)",
                  "name": "list3"
                },
                "set": {
                  "$type": "GetField(TRoute;TSet)",
                  "fieldName": "communities",
                  "record": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                }
              },
              "trueStatements": {
                "$type": "Return(TPair)",
                "return_value": {
                  "$type": "Pair(TBool;TRoute)",
                  "first": {
                    "$type": "True"
                  },
                  "second": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                }
              }
            },
            "guard": {
              "$type": "SetContains",
              "search": {
                "$type": "Var(TString)",
                "name": "list2"
              },
              "set": {
                "$type": "GetField(TRoute;TSet)",
                "fieldName": "communities",
                "record": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            },
            "trueStatements": {
              "$type": "Return(TPair)",
              "return_value": {
                "$type": "Pair(TBool;TRoute)",
                "first": {
                  "$type": "True"
                },
                "second": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            }
          }
        }
      }
    },
    "TEST_MATCH_COMM2": {
      "arg": "pair",
      "body": {
        "$type": "If(TPair)",
        "comment": "bind",
        "falseStatements": {
          "$type": "Return(TPair)",
          "return_value": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "guard": {
          "$type": "First(TBool;TRoute)",
          "pair": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "trueStatements": {
          "$type": "Seq(TPair)",
          "first": {
            "$type": "Assign(TRoute)",
            "lhs": {
              "$type": "Var(TRoute)",
              "name": "route"
            },
            "rhs": {
              "$type": "Second(TBool;TRoute)",
              "pair": {
                "$type": "Var(TPair)",
                "name": "pair"
              }
            }
          },
          "second": {
            "$type": "If(TUnit)",
            "comment": "~RMCLAUSE~TEST_MATCH_COMM2~10~",
            "falseStatements": {
              "$type": "If(TUnit)",
              "comment": "~RMCLAUSE~TEST_MATCH_COMM2~20~",
              "falseStatements": {
                "$type": "Return(TPair)",
                "return_value": {
                  "$type": "Pair(TBool;TRoute)",
                  "first": {
                    "$type": "GetField(TRoute;TBool)",
                    "fieldName": "LocalDefaultAction",
                    "record": {
                      "$type": "Var(TRoute)",
                      "name": "route"
                    }
                  },
                  "second": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                }
              },
              "guard": {
                "$type": "SetContains",
                "search": {
                  "$type": "Var(TString)",
                  "name": "list2"
                },
                "set": {
                  "$type": "GetField(TRoute;TSet)",
                  "fieldName": "communities",
                  "record": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                }
              },
              "trueStatements": {
                "$type": "Return(TPair)",
                "return_value": {
                  "$type": "Pair(TBool;TRoute)",
                  "first": {
                    "$type": "True"
                  },
                  "second": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                }
              }
            },
            "guard": {
              "$type": "SetContains",
              "search": {
                "$type": "Var(TString)",
                "name": "list3"
              },
              "set": {
                "$type": "GetField(TRoute;TSet)",
                "fieldName": "communities",
                "record": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            },
            "trueStatements": {
              "$type": "Return(TPair)",
              "return_value": {
                "$type": "Pair(TBool;TRoute)",
                "first": {
                  "$type": "True"
                },
                "second": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            }
          }
        }
      }
    },
    "TEST_MATCH_IP1": {
      "arg": "pair",
      "body": {
        "$type": "If(TPair)",
        "comment": "bind",
        "falseStatements": {
          "$type": "Return(TPair)",
          "return_value": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "guard": {
          "$type": "First(TBool;TRoute)",
          "pair": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "trueStatements": {
          "$type": "Seq(TPair)",
          "first": {
            "$type": "Assign(TRoute)",
            "lhs": {
              "$type": "Var(TRoute)",
              "name": "route"
            },
            "rhs": {
              "$type": "Second(TBool;TRoute)",
              "pair": {
                "$type": "Var(TPair)",
                "name": "pair"
              }
            }
          },
          "second": {
            "$type": "If(TUnit)",
            "comment": "~RMCLAUSE~TEST_MATCH_IP1~10~",
            "falseStatements": {
              "$type": "Return(TPair)",
              "return_value": {
                "$type": "Pair(TBool;TRoute)",
                "first": {
                  "$type": "GetField(TRoute;TBool)",
                  "fieldName": "LocalDefaultAction",
                  "record": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                },
                "second": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            },
            "guard": {
              "$type": "PrefixContains",
              "addr": {
                "$type": "GetField(TRoute;TIpAddress)",
                "fieldName": "prefix",
                "record": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              },
              "prefix": {
                "$type": "Var(TPrefixSet)",
                "name": "101"
              }
            },
            "trueStatements": {
              "$type": "Return(TPair)",
              "return_value": {
                "$type": "Pair(TBool;TRoute)",
                "first": {
                  "$type": "True"
                },
                "second": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            }
          }
        }
      }
    },
    "TEST_MATCH_IP2": {
      "arg": "pair",
      "body": {
        "$type": "If(TPair)",
        "comment": "bind",
        "falseStatements": {
          "$type": "Return(TPair)",
          "return_value": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "guard": {
          "$type": "First(TBool;TRoute)",
          "pair": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "trueStatements": {
          "$type": "Seq(TPair)",
          "first": {
            "$type": "Assign(TRoute)",
            "lhs": {
              "$type": "Var(TRoute)",
              "name": "route"
            },
            "rhs": {
              "$type": "Second(TBool;TRoute)",
              "pair": {
                "$type": "Var(TPair)",
                "name": "pair"
              }
            }
          },
          "second": {
            "$type": "If(TUnit)",
            "comment": "~RMCLAUSE~TEST_MATCH_IP2~10~",
            "falseStatements": {
              "$type": "Return(TPair)",
              "return_value": {
                "$type": "Pair(TBool;TRoute)",
                "first": {
                  "$type": "GetField(TRoute;TBool)",
                  "fieldName": "LocalDefaultAction",
                  "record": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                },
                "second": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            },
            "guard": {
              "$type": "PrefixContains",
              "addr": {
                "$type": "GetField(TRoute;TIpAddress)",
                "fieldName": "prefix",
                "record": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              },
              "prefix": {
                "$type": "Var(TPrefixSet)",
                "name": "102"
              }
            },
            "trueStatements": {
              "$type": "Return(TPair)",
              "return_value": {
                "$type": "Pair(TBool;TRoute)",
                "first": {
                  "$type": "True"
                },
                "second": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            }
          }
        }
      }
    },
    "TEST_PFX_LENGTH": {
      "arg": "pair",
      "body": {
        "$type": "If(TPair)",
        "comment": "bind",
        "falseStatements": {
          "$type": "Return(TPair)",
          "return_value": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "guard": {
          "$type": "First(TBool;TRoute)",
          "pair": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "trueStatements": {
          "$type": "Seq(TPair)",
          "first": {
            "$type": "Assign(TRoute)",
            "lhs": {
              "$type": "Var(TRoute)",
              "name": "route"
            },
            "rhs": {
              "$type": "Second(TBool;TRoute)",
              "pair": {
                "$type": "Var(TPair)",
                "name": "pair"
              }
            }
          },
          "second": {
            "$type": "If(TUnit)",
            "comment": "~RMCLAUSE~TEST_PFX_LENGTH~10~",
            "falseStatements": {
              "$type": "Return(TPair)",
              "return_value": {
                "$type": "Pair(TBool;TRoute)",
                "first": {
                  "$type": "GetField(TRoute;TBool)",
                  "fieldName": "LocalDefaultAction",
                  "record": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                },
                "second": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            },
            "guard": {
              "$type": "PrefixContains",
              "addr": {
                "$type": "GetField(TRoute;TIpAddress)",
                "fieldName": "prefix",
                "record": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              },
              "prefix": {
                "$type": "Var(TPrefixSet)",
                "name": "FOO2"
              }
            },
            "trueStatements": {
              "$type": "Seq(_)",
              "first": {
                "$type": "Seq(_)",
                "first": {
                  "$type": "Assign(TRoute)",
                  "lhs": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  },
                  "rhs": {
                    "$type": "WithField(TRoute;TSet)",
                    "fieldName": "lp",
                    "fieldVal": {
                      "$type": "Int32",
                      "value": 2
                    },
                    "record": {
                      "$type": "Var(TRoute)",
                      "name": "route"
                    }
                  }
                },
                "second": {
                  "$type": "Assign(TRoute)",
                  "lhs": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  },
                  "rhs": {
                    "$type": "WithField(TRoute;TSet)",
                    "fieldName": "lp",
                    "fieldVal": {
                      "$type": "Int32",
                      "value": 1
                    },
                    "record": {
                      "$type": "Var(TRoute)",
                      "name": "route"
                    }
                  }
                }
              },
              "second": {
                "$type": "Return(TPair)",
                "return_value": {
                  "$type": "Pair(TBool;TRoute)",
                  "first": {
                    "$type": "True"
                  },
                  "second": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                }
              }
            }
          }
        }
      }
    },
    "TEST_UPDATE": {
      "arg": "pair",
      "body": {
        "$type": "If(TPair)",
        "comment": "bind",
        "falseStatements": {
          "$type": "Return(TPair)",
          "return_value": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "guard": {
          "$type": "First(TBool;TRoute)",
          "pair": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "trueStatements": {
          "$type": "Seq(TPair)",
          "first": {
            "$type": "Assign(TRoute)",
            "lhs": {
              "$type": "Var(TRoute)",
              "name": "route"
            },
            "rhs": {
              "$type": "Second(TBool;TRoute)",
              "pair": {
                "$type": "Var(TPair)",
                "name": "pair"
              }
            }
          },
          "second": {
            "$type": "If(TUnit)",
            "comment": "~RMCLAUSE~TEST_UPDATE~10~",
            "falseStatements": {
              "$type": "Return(TPair)",
              "return_value": {
                "$type": "Pair(TBool;TRoute)",
                "first": {
                  "$type": "GetField(TRoute;TBool)",
                  "fieldName": "LocalDefaultAction",
                  "record": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                },
                "second": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            },
            "guard": {
              "$type": "PrefixContains",
              "addr": {
                "$type": "GetField(TRoute;TIpAddress)",
                "fieldName": "prefix",
                "record": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              },
              "prefix": {
                "$type": "Var(TPrefixSet)",
                "name": "FOO"
              }
            },
            "trueStatements": {
              "$type": "Seq(_)",
              "first": {
                "$type": "Assign(TRoute)",
                "lhs": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                },
                "rhs": {
                  "$type": "WithField(TRoute;TSet)",
                  "fieldName": "lp",
                  "fieldVal": {
                    "$type": "Int32",
                    "value": 1
                  },
                  "record": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                }
              },
              "second": {
                "$type": "Return(TPair)",
                "return_value": {
                  "$type": "Pair(TBool;TRoute)",
                  "first": {
                    "$type": "True"
                  },
                  "second": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                }
              }
            }
          }
        }
      }
    },
    "TEST_UPDATE_IDEM": {
      "arg": "pair",
      "body": {
        "$type": "If(TPair)",
        "comment": "bind",
        "falseStatements": {
          "$type": "Return(TPair)",
          "return_value": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "guard": {
          "$type": "First(TBool;TRoute)",
          "pair": {
            "$type": "Var(TPair)",
            "name": "pair"
          }
        },
        "trueStatements": {
          "$type": "Seq(TPair)",
          "first": {
            "$type": "Assign(TRoute)",
            "lhs": {
              "$type": "Var(TRoute)",
              "name": "route"
            },
            "rhs": {
              "$type": "Second(TBool;TRoute)",
              "pair": {
                "$type": "Var(TPair)",
                "name": "pair"
              }
            }
          },
          "second": {
            "$type": "If(TUnit)",
            "comment": "~RMCLAUSE~TEST_UPDATE_IDEM~10~",
            "falseStatements": {
              "$type": "Return(TPair)",
              "return_value": {
                "$type": "Pair(TBool;TRoute)",
                "first": {
                  "$type": "GetField(TRoute;TBool)",
                  "fieldName": "LocalDefaultAction",
                  "record": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                },
                "second": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              }
            },
            "guard": {
              "$type": "PrefixContains",
              "addr": {
                "$type": "GetField(TRoute;TIpAddress)",
                "fieldName": "prefix",
                "record": {
                  "$type": "Var(TRoute)",
                  "name": "route"
                }
              },
              "prefix": {
                "$type": "Var(TPrefixSet)",
                "name": "FOO"
              }
            },
            "trueStatements": {
              "$type": "Seq(_)",
              "first": {
                "$type": "Seq(_)",
                "first": {
                  "$type": "Assign(TRoute)",
                  "lhs": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  },
                  "rhs": {
                    "$type": "WithField(TRoute;TSet)",
                    "fieldName": "lp",
                    "fieldVal": {
                      "$type": "Int32",
                      "value": 2
                    },
                    "record": {
                      "$type": "Var(TRoute)",
                      "name": "route"
                    }
                  }
                },
                "second": {
                  "$type": "Assign(TRoute)",
                  "lhs": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  },
                  "rhs": {
                    "$type": "WithField(TRoute;TSet)",
                    "fieldName": "lp",
                    "fieldVal": {
                      "$type": "Int32",
                      "value": 1
                    },
                    "record": {
                      "$type": "Var(TRoute)",
                      "name": "route"
                    }
                  }
                }
              },
              "second": {
                "$type": "Return(TPair)",
                "return_value": {
                  "$type": "Pair(TBool;TRoute)",
                  "first": {
                    "$type": "True"
                  },
                  "second": {
                    "$type": "Var(TRoute)",
                    "name": "route"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "Nodes": {},
  "Route": {
    "communities": "TSet",
    "lp": "TInt32",
    "metric": "TInt32",
    "prefix": "TIpAddress",
    "tag": "TInt32"
  },
  "Symbolics": {},
  "TemporalInvariants": {}
}